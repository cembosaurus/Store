// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.Inventory.Data;

#nullable disable

namespace Inventory.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Inventory.Models.AccessoryItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("AccessoryItemId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "AccessoryItemId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("Inventory.Models.SimilarProductItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SimilarProductItemId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "SimilarProductItemId");

                    b.ToTable("SimilarProducts");
                });

            modelBuilder.Entity("Services.Inventory.Models.CatalogueItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Instock")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("CatalogueItems");
                });

            modelBuilder.Entity("Services.Inventory.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Services.Inventory.Models.ItemPrice", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<double?>("RRP")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.HasKey("ItemId");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("Inventory.Models.AccessoryItem", b =>
                {
                    b.HasOne("Services.Inventory.Models.CatalogueItem", "CatalogueItem")
                        .WithMany("Accessories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogueItem");
                });

            modelBuilder.Entity("Inventory.Models.SimilarProductItem", b =>
                {
                    b.HasOne("Services.Inventory.Models.CatalogueItem", "CatalogueItem")
                        .WithMany("SimilarProducts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogueItem");
                });

            modelBuilder.Entity("Services.Inventory.Models.CatalogueItem", b =>
                {
                    b.HasOne("Services.Inventory.Models.Item", "Item")
                        .WithOne("CatalogueItem")
                        .HasForeignKey("Services.Inventory.Models.CatalogueItem", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Services.Inventory.Models.ItemPrice", b =>
                {
                    b.HasOne("Services.Inventory.Models.CatalogueItem", "CatalogueItem")
                        .WithOne("ItemPrice")
                        .HasForeignKey("Services.Inventory.Models.ItemPrice", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogueItem");
                });

            modelBuilder.Entity("Services.Inventory.Models.CatalogueItem", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("ItemPrice")
                        .IsRequired();

                    b.Navigation("SimilarProducts");
                });

            modelBuilder.Entity("Services.Inventory.Models.Item", b =>
                {
                    b.Navigation("CatalogueItem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
