// <auto-generated />
using System;
using Metrics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Metrics.Migrations
{
    [DbContext(typeof(MetricsContext))]
    partial class MetricsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Metrics.Models.APIService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deployed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("Terminated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Metrics.Models.HttpTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("HttpTransaction");
                });

            modelBuilder.Entity("Metrics.Models.Method", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Method");

                    b.HasData(
                        new
                        {
                            Name = "CONNECT"
                        },
                        new
                        {
                            Name = "DELETE"
                        },
                        new
                        {
                            Name = "GET"
                        },
                        new
                        {
                            Name = "HEAD"
                        },
                        new
                        {
                            Name = "OPTIONS"
                        },
                        new
                        {
                            Name = "PATCH"
                        },
                        new
                        {
                            Name = "POST"
                        },
                        new
                        {
                            Name = "PUT"
                        },
                        new
                        {
                            Name = "TRACE"
                        });
                });

            modelBuilder.Entity("Metrics.Models.Request", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("HttpMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HttpTransactionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RemoteServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId", "Index");

                    b.HasIndex("HttpMethodName");

                    b.HasIndex("HttpTransactionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Metrics.Models.Response", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("HttpMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HttpTransactionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RemoteServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId", "Index");

                    b.HasIndex("HttpMethodName");

                    b.HasIndex("HttpTransactionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Metrics.Models.Request", b =>
                {
                    b.HasOne("Metrics.Models.Method", "Method")
                        .WithMany("Requests")
                        .HasForeignKey("HttpMethodName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metrics.Models.HttpTransaction", "HttpTransaction")
                        .WithMany("Requests")
                        .HasForeignKey("HttpTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metrics.Models.APIService", "APIService")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("APIService");

                    b.Navigation("HttpTransaction");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Metrics.Models.Response", b =>
                {
                    b.HasOne("Metrics.Models.Method", "Method")
                        .WithMany("Responses")
                        .HasForeignKey("HttpMethodName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metrics.Models.HttpTransaction", "HttpTransaction")
                        .WithMany("Responses")
                        .HasForeignKey("HttpTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metrics.Models.APIService", "APIService")
                        .WithMany("Responses")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("APIService");

                    b.Navigation("HttpTransaction");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Metrics.Models.APIService", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Metrics.Models.HttpTransaction", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Metrics.Models.Method", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
