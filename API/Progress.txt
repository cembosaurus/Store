


                            To DO: API_Gateway - RemoteServices Controller and Management - RemoteServices Coontroller -----> add FLUENT VALIDATION !!!

                            To Do: all HttpServices classes in all services -- ad EmptyResult condition like in HttpItemService ------ also "EmptyContent" in condition put into enum so it is not such a hack



                            To Do: ----------------------------> WHAT if Management API service sends new Global Config UPDATE with NEW/UPDATED Management API service URL to all services ????????????????????????????????????????????????????????????????? Implement UPDATE/Rewrite functionality to correct data in Appsettings !!!
                            To Do: Appsettings_PROVIDER --> AddOrUpdateAppSetting() --> implement ADD key if doesn't exist !!!!!!!!!!!!!!







                            To Do: REMOVE bad request responses from controllers , replace with actual errors !!!!!!!!!!!!!!!!!!!!!!!!



                            To Do: DbGuard_MW middleware -> enable DB Status checkup after SQL server is able to send HTTP request to API service about being ready ???????????????????????????





                            To Do: RabbitMQW --- Invewntory.Consumer --> FIX temporary dodgy appsettings data management in MessageBusSubscriber





          WARNING:  http://localhost:5000/order/all GetAllOrders() --> extra call to identity for TESTING. Delete after TESTING (Ordering API --> OrderService.GetAllOrders())
                                        
                                        To Do: identify original request sender (if MW didn't add false bool isSender into httpcontext of incoming request the it is sender), he will send data to metrics!!!! 
                                                f.e: FE -> API_Gateway -> Ordering. -> Identity ------ API_Gateway is sender
                                                f.e: Ordering -> Scheduler ------ Ordering is sender



                                        To Do: DEV/PROD in global config should be decided directly in DB or Repo, then work with adequate environmental data all over the project !!!!












                                                ***************************************************************** IMPORTANT ********************************************


                         To Do: TEST ---> 1. run api_gateway - do http://localhost:5000/order/all, observe Metrics service not rerached !!!! ---> EX unhandled !!!! ---------------------------------------------------------> FIXED !
                                                API_Gateway to Metrics have to call Management (to fetch Metrics URL) where (unlike HttpBaseService) Management.Send() is UNHANDLED!!!!!!!!!!!

                                          2. run Management service observe whether5 API_Gateway updates GlobalConfig !!!!!! ---> GC updated but Management says API_Gasteway not updated ?????

                                          3. run Order service observe whether request reached this service !!!!! ---> doesn't upodate GC !!!

                                          4. metrics data in header indexed inproperly

                                          5. activate Metrics and observe



                    To Do: refactor AppendPreviousHeadersToResponse() and Response_IN() in client -----> also metrics.index is no tpassed to ApiGateway MW on way back to client if: ApiGateway -> Ordering -> Payment -ex-> Ordering -> Management -> Ordering -> Payment -ex-> and back
                    To Do: METRICS EF dbcontext -> models relations, PK, FK etc... and  migration -------> req id added to header to identify request in app


                    To Do: HEADERS VALUE --> GUID instead hostname f.e. localhost:8000/ --- for direct write into domain DB classes. HEADER KEY should contain GUID and NAME (as it still does) in case service has been rtestarted with different GUID
                    To Do: create class (protocol structure) to generatee header to prevent missing data. F.e: "3.REQ.IN.API_Gateway.GET.localhost.8000./order/all.2024-10-28 01:08:28.019"
                        - REQ, RES --> bool, f.e: 0 = ".." (no data between dots), 1 = ".?." (some data between dots) --- OR: enum REQ.IN, REQ.OUT, RESP.IN, RESP.OUT (1,2,3,4)
                        - IN, OUT --> bool, f.e: 0 = ".." (no data between dots), 1 = ".?." (some data between dots) --- OR: enum REQ.IN, REQ.OUT, RESP.IN, RESP.OUT (1,2,3,4)
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                               


























